<?php
namespace Drupal\music_search\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\music_search\DiscogsSearchService;
use Drupal\music_search\SpotifySearchService;
use http\Env\Response;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class MusicSearchForm
 *
 * @package Drupal\music_search\Form
 */
class SearchResultsForm extends ConfigFormBase {
  /**
   * @var \Drupal\music_search\SpotifySearchService
   */
  protected $spotify_service;

  /**
   * @var \Drupal\music_search\DiscogsSearchService
   */
  protected $discogs_service;

  /**
   * SearchController constructor.
   *
   * @param \Drupal\music_search\SpotifySearchService $spotify_service
   */
  public function __construct(SpotifySearchService $spotify_service, DiscogsSearchService $discogs_service) {
    $this->spotify_service = $spotify_service;
    $this->discogs_service = $discogs_service;
  }

  /**
   * {@inheritDoc}
   */
  public static function create(ContainerInterface $container) {
    return new static (
      $container->get("music_search.search"),
      $container->get("discogs_search.search")
    );
  }
  /**
   * {@inheritDoc}
   */
  protected function getEditableConfigNames() {
    return ["music_search.search_results"];
  }

  /**
   * {@inheritDoc}
   */
  public function getFormId() {
    return "search_results";
  }

  /**
   * {@inheritDoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $discogs_data = $this->discogs_service->get_data();
    $spotify_data = json_decode($this->spotify_service->get_data());
    $spotify_options_array = $this->_prettify_spotify_data($spotify_data);
    $discogs_options_array = $this->_prettify_discogs_data($discogs_data);

    $form['name'] = array(
      '#type' => 'checkboxes',
      '#title' => '<h1>Spotify Results</h1>',
      '#options' => $spotify_options_array,
    );
    $form['name_discogs'] = array(
      '#type' => 'checkboxes',
      '#title' => '<h1>Discogs Results</h1>',
      '#options' => $discogs_options_array,
    );

    $form["Continue"] = [
      "#type" => "submit",
      "#value" => "Continue"
    ];
    return $form;
  }

  /**
   * {@inheritDoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $values_list = $form_state->getValue('name');
    $all_items = $form['name']['#options'];
    $this->config("music_search.search_results")
      ->set("checkbox_values", $values_list)
      ->set("all_items", $all_items)
      ->save();
    $form_state->setRedirectUrl(Url::fromUri('internal:/confirmation_form'));
    parent::submitForm($form, $form_state);
  }

  /**
   * {@inheritDoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    //Do later!!!!
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  private function _prettify_spotify_data($data) {
    $options = [];
    $radio_value = $this->config("music_search.search")->get("rad_val");
    if ($radio_value == "artist") {
      $new_data = $data->artists->items;
    }
    elseif ($radio_value == "album") {
      $new_data = $data->albums->items;
    }
    else {
      $new_data = $data->tracks->items;
    }

    foreach ($new_data as $item) {
      if (sizeof($item->images) != 0) {
        $html_string = $this->html_template($item->name, $item->id, $item->images[0]->url);
      }
      else {
        $html_string = $this->html_template($item->name, $item->id, null);
      }
      array_push($options, $html_string);
    }

    return $options;
  }

  private function _prettify_discogs_data($data) {
    $options = [];
    foreach($data as $item) {
      $html_string = $this->html_template($item->title, $item->id, $item->thumb,false);
      array_push($options, $html_string);
    }
    return $options;
  }

  private function html_template($title, $id, $img_url, $spotify=true) {
    if ($spotify) {
      $id_string = "Spotify ID: ";
    }
    else {
      $id_string = "Discogs ID: ";
    }
    $name = '<p> Name: ' . $title . '</p>';
    $discogs_id = '<p>'. $id_string . $id . '</p>';
    switch($img_url) {
      case null:
        $str_image = "<p>No thumbnail available</p>";
        break;
      default:
        $str_image = '<img class = "stuff" src=' . $img_url . ' width = "400" >';
    }
    return "<div>". $name . $discogs_id . $str_image . "</div>";
  }
}

<?php
namespace Drupal\music_search\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\music_search\SpotifySearchService;
use http\Env\Response;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class MusicSearchForm
 *
 * @package Drupal\music_search\Form
 */
class SearchResultsForm extends ConfigFormBase {
  /**
   * @var \Drupal\music_search\SpotifySearchService
   */
  protected $spotify_service;

  /**
   * SearchController constructor.
   *
   * @param \Drupal\music_search\SpotifySearchService $spotify_service
   */
  public function __construct(SpotifySearchService $spotify_service) {
    $this->spotify_service = $spotify_service;
  }

  /**
   * {@inheritDoc}
   */
  public static function create(ContainerInterface $container) {
    return new static (
      $container->get("music_search.search")
    );
  }
  /**
   * {@inheritDoc}
   */
  protected function getEditableConfigNames() {
    return ["music_search.search_results"];
  }

  /**
   * {@inheritDoc}
   */
  public function getFormId() {
    return "search_results";
  }

  /**
   * {@inheritDoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $data = json_decode($this->spotify_service->get_data());
    $options = [];
    $imgs_form = "";


    foreach($data as $stuff ) {
      foreach($stuff->items as $item) {

        if($item->images != null and $item->images[0]->url) {
          $img_url = $item->images[0]->url;
          $str_image = '<img src=' . $img_url . ' width = "100" >';
          $name = '<p id="name">'.$item->name.'</p>';
          $imgs_form = $imgs_form.$name.$str_image;
        }
        array_push($options,$item->name);
      }
    }
    $form['name'] = array(
      '#type' => 'markup',
      '#title' => t('Name'),
      '#markup' => $imgs_form,
    );
    return $form;
  }

  /**
   * {@inheritDoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    parent::submitForm($form, $form_state);
  }

  /**
   * {@inheritDoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    //Do later!!!!
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

}

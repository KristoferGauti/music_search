<?php
namespace Drupal\music_search\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\music_search\SpotifySearchService;
use http\Env\Response;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class MusicSearchForm
 *
 * @package Drupal\music_search\Form
 */
class SearchResultsForm extends ConfigFormBase {
  /**
   * @var \Drupal\music_search\SpotifySearchService
   */
  protected $spotify_service;

  /**
   * SearchController constructor.
   *
   * @param \Drupal\music_search\SpotifySearchService $spotify_service
   */
  public function __construct(SpotifySearchService $spotify_service) {
    $this->spotify_service = $spotify_service;
  }

  /**
   * {@inheritDoc}
   */
  public static function create(ContainerInterface $container) {
    return new static (
      $container->get("music_search.search")
    );
  }
  /**
   * {@inheritDoc}
   */
  protected function getEditableConfigNames() {
    return ["music_search.search_results"];
  }

  /**
   * {@inheritDoc}
   */
  public function getFormId() {
    return "search_results";
  }

  /**
   * {@inheritDoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $data = json_decode($this->spotify_service->get_data());
    $options = [];
    $radio_value = $this->config("music_search.search")->get("rad_val");

    foreach($data as $stuff ) {
      foreach($stuff->items as $item) {
        //edge case for tracks whereas tracks does not have $item->images property, fix this with an if statement
        //item->album->images[0]->url
        if ($radio_value =='track')  {
          $img_url_one = $item->album->images;
          $img_url_two = $item->album->images[0]->url;
        } else {
          $img_url_one = $item->images;
          $img_url_two = $item->images[0]->url;
        }

        if($img_url_one != null and $img_url_two) {
          $img_url = $img_url_two;
          $name = '<p> Name: '.$item->name.'</p>';
          $spotify_id = '<p> Spotify ID: ' . $item->id . '</p>';
          $str_image = '<img src=' . $img_url . ' width = "400" >';

          $html_string = "<div>". $name . $spotify_id . $str_image . "</div>";
          array_push($options, $html_string);
        }
        else {
          $no_thumbnail_html_string = "<div><p>" . $item->name . "</p><p>No thumbnail available</p></div>";
          array_push($options, $no_thumbnail_html_string);
        }
      }
    }

    
    $form['name'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
    );
    $form["Continue"] = [
      "#type" => "submit",
      "#value" => "Continue"
    ];
    return $form;
  }

  /**
   * {@inheritDoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $values_list = $form_state->getValue('name');
    $this->config("music_search.search_results")
      ->set("checkbox_values", $values_list)
      ->save();
    $form_state->setRedirectUrl(Url::fromUri('internal:/confirmation_form'));
    parent::submitForm($form, $form_state);
  }

  /**
   * {@inheritDoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    //Do later!!!!
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

}

<?php
namespace Drupal\music_search\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\music_search\SpotifySearchService;
use http\Env\Response;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class MusicSearchForm
 *
 * @package Drupal\music_search\Form
 */
class MusicSearchForm extends ConfigFormBase {

  /**
   * {@inheritDoc}
   */
  protected function getEditableConfigNames() {
    return ["music_search.search"];
  }

  /**
   * {@inheritDoc}
   */
  public function getFormId() {
    return "music_search_form";
  }

  /**
   * {@inheritDoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $type = $this->config("music_search.search")->get("rad_val");
    $form["search_field"] = [
      "#type" => "textfield",
      "#title" => $this->t("Search for " . $type),
      "#description" => $this->t("Please provide an " . $type . " name to search"),
      "#autocomplete_route_name" => "music_search.autocomplete"
    ];
    $form["Search"] = [
      "#type" => "submit",
      "#value" => "Search"
    ];

    return $form;
  }

  /**
   * {@inheritDoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $search_results = $form_state->getValue("search_field");
    if (str_contains($search_results, " - Spotify") or str_contains($search_results, " - Discogs")) {
      $search_results = explode(" -", $search_results, $limit=PHP_INT_MAX)[0];
    }
    $this->config("music_search.search")
      ->set("spotify_search", $search_results)
      ->save();
    $form_state->setRedirectUrl(Url::fromUri('internal:/search_results_form'));
    parent::submitForm($form, $form_state);
  }

  /**
   * {@inheritDoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    //Do later!!!!
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

}
